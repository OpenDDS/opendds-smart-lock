#!/usr/bin/env bash

set -eufo pipefail
IFS=$'\n\t'

declare -r _SMART_LOCK_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

declare -r command="$0"

declare -i arg_idx=0
declare -ra args=( "$@" )

function end-of-input? {
    [[ ${arg_idx} == ${#args[@]} ]]
}

function peek {
    if end-of-input?; then
        echo '#END#'
        return
    fi

    # When peeking at the completion word, return a special token.
    if [[ $((${arg_idx}+1)) == "${COMP_CWORD:-}" ]]; then
        echo '#COMPLETION#'
        return
    fi

    echo "${args+${args[${arg_idx}]:-}}"
}

function consume {
    if end-of-input?; then
        return
    fi
    arg_idx=$((arg_idx+1))
    true
}

function command-prefix {
    echo "${command} ${args+${args[@]:0:${arg_idx}}}"
}

function expected {
    if [[ $((${arg_idx}+1)) == "${COMP_CWORD:-}" ]]; then
        # Completion.
        for x in "$@"; do
            echo "${x}"
        done | grep "^${args[$((${arg_idx}))]}"
        exit
    fi

    if [[ "$(peek)" == 'help' ]]; then
        echo "${_help_message}"
        exit
    fi

    {
        local -ra before=("${command}" "${args+${args[@]:0:${arg_idx}}}")
        local -ra after=("${args+${args[@]:${arg_idx}}}")
        echo "${before+${before[@]}} . ${after+${after[@]}}"
        echo "Expected:"
        for x in "$@"; do
            echo "  ${x}"
        done
    } >&2
    exit 1
}

function expected-keywords {
    expected "$@" help
}

function match-keyword {
    if end-of-input? || [[ "$(peek)" != "$1" ]]; then
        expected-keywords "$1"
    fi
    consume
}

function expected-file {
    if [[ $((${arg_idx}+1)) == "${COMP_CWORD:-}" ]]; then
        # Completion.
        compgen -f "${args[$((${arg_idx}))]}"
        exit
    fi

    {
        echo "${command} ${args+${args[@]:0:${arg_idx}}} . ${args+${args[@]:${arg_idx}}}"
        echo "Expected:"
        echo "  PATH"
    } >&2
    exit 1
}

function expected-end-of-input {
    local -r token="$(peek)"
    case "${token}" in
        '#COMPLETION#')
            # Offer help if completing at the end.
            echo help
            exit
            ;;
        '#END#')
            # Great.
            return
            ;;
        'help')
            if [ -z "${COMP_CWORD:-}" ]; then
                echo "${_help_message}"
            fi
            exit
            ;;
        *)
            {
                echo "${command} ${args+${args[@]:0:${arg_idx}}} . ${args+${args[@]:${arg_idx}}}"
                echo "Expected:"
                echo "  (end of arguments)"
            } >&2
            exit 1
    esac
}

declare _help_message=
function set-help {
    _help_message="$1"
}

declare _no_config=yes
declare config_path

function config {
    match-keyword 'config'

    unset _no_config

    config_path="$(peek)"
    case "${config_path}" in
        '#COMPLETION#')
            expected-file
            ;;
        '#END#')
            expected-file
            ;;
    esac
    consume
}

function load-config {
    if [[ "${_no_config:-}" == yes ]]; then
        if [ -r 'smart-lock-conf.sh' ]; then
            echo "Loading config from smart-lock-conf.sh"
            source smart-lock-conf.sh
        else
            echo "No config"
        fi
        return
    fi

    echo "Loading config from ${config_path}"
    source "${config_path}"
}

declare pi_name

function to-pi {
    pi_name="$(peek)"
    case "${pi_name}" in
        '#COMPLETION#')
            load-config >/dev/null 2>&1
            expected "${PI_NAMES[@]}"
            ;;
        '#END#')
            expected 'NAME'
            ;;
    esac
    consume
}

function pi-build-toolchain {
    #Build a Docker image containing a cross-compiler and cross-compiled dependencies
    #Must be run first before other pi commands can be executed
    #ex: ./smart-lock pi build-toolchain
    match-keyword 'build-toolchain'
    expected-end-of-input

    #add --no-cache if needed: "docker build --no-cache ..."
    docker build "${_SMART_LOCK_DIR}/dockerfiles/pi-opendds-cross" -f "${_SMART_LOCK_DIR}/dockerfiles/pi-opendds-cross/Dockerfile" -t pi-opendds-cross
}

function pi-clean-toolchain {
    #Remove the Docker image containing a cross-compiler and cross-compiled dependencies
    #ex: ./smart-lock pi clean-toolchain
    match-keyword 'clean-toolchain'
    expected-end-of-input

    docker rmi pi-opendds-cross
}

function pi-install-dependencies {
    # Copies all dependencies to target pi from docker image
    # ex: ./smart-lock pi install-dependencies pi_1
    match-keyword 'install-dependencies'
    to-pi
    expected-end-of-input

    load-config
    local -r ip_var="${pi_name}_ip"

    # Copy the dependencies out of the docker image.
    rm -rf "${_SMART_LOCK_DIR}/libs"
    mkdir -p "${_SMART_LOCK_DIR}/libs"
    docker run -d --name piopendds pi-opendds-cross
    docker cp piopendds:/home/pi/pi-opendds.tar.gz  libs
    docker cp piopendds:/home/pi/pi-openssl.tar.gz  libs
    docker cp piopendds:/home/pi/pi-xerces.tar.gz libs
    docker stop piopendds
    docker rm piopendds
    #docker run --rm -ti -v "${_SMART_LOCK_DIR}:/home/pi/outer" -w "/home/pi" pi-opendds-cross bash -c "mkdir -p outer/libs; cp pi-opendds.tar.gz pi-openssl.tar.gz pi-xerces.tar.gz outer/libs"    # Copy them to the pi.
    scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "${_SMART_LOCK_DIR}/libs/pi-opendds.tar.gz" "${_SMART_LOCK_DIR}/libs/pi-openssl.tar.gz" "${_SMART_LOCK_DIR}/libs/pi-xerces.tar.gz" "pi@${!ip_var}:"
    # Unzip them.
    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "pi@${!ip_var}" 'tar xzf pi-opendds.tar.gz; tar xzf pi-openssl.tar.gz; tar xzf pi-xerces.tar.gz'
}

function pi-compile {
    #Cross-compile the SmartLock Demo application
    #ex: ./smart-lock pi compile
    match-keyword 'compile'
    expected-end-of-input

    docker run --rm -it -v "${_SMART_LOCK_DIR}/src:/home/pi/smartlock" -w "/home/pi/smartlock" pi-opendds-cross bash -c "source /home/pi/pi-opendds/build/target/setenv.sh; mwc.pl -type gnuace -features 'no_wiring_pi=0'; make"
}

function pi-install {
    #Copy the compiled SmartLock Demo to target pi
    #ex: ./smart-lock pi install pi_1
    #To be used after build-toolchain, install-dependencies, and compile
    match-keyword 'install'
    to-pi
    expected-end-of-input

    load-config
    local -r ip_var="${pi_name}_ip"
    local -r lock_id_var="${pi_name}_lock_id"

    cp "${_SMART_LOCK_DIR}/src/rtps.ini.template" "${_SMART_LOCK_DIR}/src/rtps.ini"
    if [ -n "${RTPS_RELAY_IP_PI:-}" ]; then
	let "RTPS_RELAY_PORT_PI_SEDP = RTPS_RELAY_PORT_PI + 1"
	let "RTPS_RELAY_PORT_PI_DATA = RTPS_RELAY_PORT_PI + 2"
    #    sed -e "s/#SPDP_RTPS_RELAY_ADDRESS_LINE/SpdpRtpsRelayAddress=${RTPS_RELAY_IP_PI}:4444/g" -e "s/#SEDP_RTPS_RELAY_ADDRESS_LINE/SedpRtpsRelayAddress=${RTPS_RELAY_IP_PI}:4445/g" -e "s/#DATA_RTPS_RELAY_ADDRESS_LINE/DataRtpsRelayAddress=${RTPS_RELAY_IP_PI}:4446/g" -i'' "${_SMART_LOCK_DIR}/src/rtps.ini"
        sed -e "s/#SPDP_RTPS_RELAY_ADDRESS_LINE/SpdpRtpsRelayAddress=${RTPS_RELAY_IP_PI}:${RTPS_RELAY_PORT_PI}/g" -e "s/#SEDP_RTPS_RELAY_ADDRESS_LINE/SedpRtpsRelayAddress=${RTPS_RELAY_IP_PI}:${RTPS_RELAY_PORT_PI_SEDP}/g" -e "s/#DATA_RTPS_RELAY_ADDRESS_LINE/DataRtpsRelayAddress=${RTPS_RELAY_IP_PI}:${RTPS_RELAY_PORT_PI_DATA}/g" -i'' "${_SMART_LOCK_DIR}/src/rtps.ini"
    fi

    rm -f "${_SMART_LOCK_DIR}/src/smartlock_env"
    if [ ${ENABLE_SECURITY:-} == 1 ]; then
        echo "SMARTLOCK_SECURE=1" > "${_SMART_LOCK_DIR}/src/smartlock_env"
    else
        echo "SMARTLOCK_SECURE=0" > "${_SMART_LOCK_DIR}/src/smartlock_env"
    fi

    rsync -avz -e 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null' "${_SMART_LOCK_DIR}/src/" "pi@${!ip_var}:~/smartlock"
    if [ ${ENABLE_SECURITY:-} == 1 ]; then
        rsync -avz -e 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null' "${_SMART_LOCK_DIR}/certs/" "pi@${!ip_var}:~/smartlock/certs/"
    fi
    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "pi@${!ip_var}" "sudo cp /home/pi/smartlock/systemd/smartlock.service /etc/systemd/system/smartlock.service; sudo chmod 0644 /etc/systemd/system/smartlock.service; sudo systemctl daemon-reload; sudo systemctl enable smartlock; echo '${!lock_id_var}' > /home/pi/smartlock.id"
}

function pi-start {
    # Start the SmartLock Demo on target pi
    # ex: ./smart-lock pi start pi_1
    match-keyword 'start'
    to-pi
    expected-end-of-input

    load-config
    local -r ip_var="${pi_name}_ip"
    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "pi@${!ip_var}" 'sudo systemctl start smartlock'
 }

function pi-stop {
    #Stop the SmartLock Demo on target pi
    # ex: ./smart-lock pi stop pi_1
    match-keyword 'stop'
    to-pi
    expected-end-of-input

    load-config
    local -r ip_var="${pi_name}_ip"
    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "pi@${!ip_var}" 'sudo systemctl stop smartlock'
}

function pi-status {
    #Show the status of the SmartLock on target pi
    #ex: ./smart-lock pi status pi_1
    match-keyword 'status'
    to-pi
    expected-end-of-input

    load-config
    local -r ip_var="${pi_name}_ip"
    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "pi@${!ip_var}" 'sudo systemctl status smartlock'
}

function pi-restart {
    #Restart the SmartLock the Demo on the target pi
    #ex: ./smart-lock pi restart pi_1
    match-keyword 'restart'
    to-pi
    expected-end-of-input

    load-config
    local -r ip_var="${pi_name}_ip"
    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "pi@${!ip_var}" 'sudo systemctl restart smartlock'
}

function pi-logs {
    # Show the logs for target pi
    #ex: ./smart-lock pi logs pi_1
    #Can be augmented with "follow"
    match-keyword 'logs'
    to-pi
    declare follow=
    local -r token="$(peek)"
    case "${token}" in
        follow)
            match-keyword 'follow'
            follow='-f'
            ;;
        '#COMPLETION#')
            expected-keywords 'follow'
            ;;
        '#END#')
            # Okay.
            ;;
    esac
    expected-end-of-input

    load-config
    local -r ip_var="${pi_name}_ip"
    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "pi@${!ip_var}" "sudo journalctl ${follow} -u smartlock"
}

function pi-ssh {
    #ssh into target pi
    #ex: ./smart-lock pi ssh pi_1
    match-keyword 'ssh'
    to-pi
    expected-end-of-input

    load-config
    local -r ip_var="${pi_name}_ip"
    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "pi@${!ip_var}"
}

function pi-copy-public-key {
    #Copy a public key to target pi
    #ex: ./smart-lock copy-public-key ~/your/path/here
    match-keyword 'copy-public-key'
    to-pi
    local -r path="$(peek)"
    case "${path}" in
        '#COMPLETION#')
            expected-file
            ;;
        '#END#')
            expected-file
            ;;
    esac
    consume
    expected-end-of-input

    local -r key=$(cat "${path}")

    load-config
    local -r ip_var="${pi_name}_ip"

    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "pi@${!ip_var}" "if ! [ -e /home/pi/.ssh/authorized_keys ] || ! grep -q '${key}' /home/pi/.ssh/authorized_keys; then echo '${key}' >> /home/pi/.ssh/authorized_keys; chmod 400 /home/pi/.ssh/authorized_keys; fi"
}

function pi {
    #Maps commands to a pi version
    #ex: ./smart-lock pi help
    match-keyword 'pi'
    local -r h=$(cat <<EOF
$(command-prefix) - Development tool for Raspberry Pis in the SmartLock Demo

Usage: $(command-prefix) COMMAND [OPTION ...]

    Commands:
            build-toolchain                 Build a Docker image containing a cross-compiler and cross-compiled dependencies
            clean-toolchain                 Remove the Docker image containing a cross-compiler and cross-compiled dependencies
            compile                         Cross-compile the SmartLock Demo application
            install-dependencies NAME       Copy all dependencies to NAME
            install NAME                    Copy the compiled SmartLock Demo application to NAME
            start NAME                      Start the SmartLock Demo application on NAME
            stop NAME                       Stop the SmartLock Demo application on NAME
            status NAME                     Show the status of the SmartLock Demo application on NAME
            restart NAME                    Restart the SmartLock the Demo application on NAME
            ssh NAME                        ssh into NAME
            logs NAME [follow]              Show the logs for NAME
            copy-public-key PATH            Copy a public key to NAME
            help                            Print this help
EOF
                 )
    set-help "${h}"

    local -r token="$(peek)"
    case "${token}" in
        build-toolchain)
            pi-build-toolchain
            ;;
        clean-toolchain)
            pi-clean-toolchain
            ;;
        compile)
            pi-compile
            ;;
        install-dependencies)
            pi-install-dependencies
            ;;
        install)
            pi-install
            ;;
        start)
            pi-start
            ;;
        stop)
            pi-stop
            ;;
        status)
            pi-status
            ;;
        restart)
            pi-restart
            ;;
        ssh)
            pi-ssh
            ;;
        logs)
            pi-logs
            ;;
        copy-public-key)
            pi-copy-public-key
            ;;
        *)
            expected-keywords build-toolchain clean-toolchain compile install-dependencies install start stop status restart ssh logs copy-public-key
            ;;
    esac
}

function android-build-toolchain {
    #Build a Docker image containing a cross-compiler and cross-compiled dependencies
    #ex: ./smart-lock android build-toolchain
    local commit='master'
    match-keyword 'build-toolchain'

    if ! end-of-input?; then
	commit="$(peek)"
        consume
    fi

    expected-end-of-input

    #add --no-cache if needed: "docker build --no-cache ..."
    docker build --build-arg "OPENDDS_BRANCH=${commit}" "${_SMART_LOCK_DIR}/dockerfiles/android-opendds-cross" -f "${_SMART_LOCK_DIR}/dockerfiles/android-opendds-cross/Dockerfile" -t android-opendds-cross
}

function android-clean-toolchain {
    #Remove the Docker image containing a cross-compiler and cross-compiled dependencies
    #ex: ./smart-lock android clean-toolchain
    match-keyword 'clean-toolchain'
    expected-end-of-input

    docker rmi android-opendds-cross
}

function android-compile {
    # Cross-compile the SmartLock Demo for android
    #ex: ./smart-lock android compile
    match-keyword 'compile'
    expected-end-of-input

    load-config

    local -r locks=$(
        echo -n '<string-array name="locks">';
        for pi_name in "${PI_NAMES[@]}"; do
            local lock_id_var="${pi_name}_lock_id";
            if [ -n "${!lock_id_var:-}" ]; then
                echo -n "<item>${!lock_id_var}<\/item>";
            else
                echo "WARNING: ${pi_name} has no lock id and will not be accessible" >&2;
            fi
        done
        echo -n '<\/string-array>';
          )

    cp "${_SMART_LOCK_DIR}/android/SmartLock/general_config.xml.template" "${_SMART_LOCK_DIR}/android/SmartLock/app/src/main/res/values/general_config.xml"
    sed -e "s/{LOCKS}/${locks}/g" -i'' "${_SMART_LOCK_DIR}/android/SmartLock/app/src/main/res/values/general_config.xml"
    if [ ${ENABLE_SECURITY:-} == 1 ]; then
        sed 's/name="secure_opendds">false/name="secure_opendds">true/' -i'' "${_SMART_LOCK_DIR}/android/SmartLock/app/src/main/res/values/general_config.xml"
    fi

    cp "${_SMART_LOCK_DIR}/android/SmartLock/app/src/main/assets/opendds_config.ini.template"  "${_SMART_LOCK_DIR}/android/SmartLock/app/src/main/assets/opendds_config.ini"
    if [ -n "${RTPS_RELAY_IP_ANDROID:-}" ]; then
        let "RTPS_RELAY_PORT_ANDROID_SEDP = RTPS_RELAY_PORT_ANDROID + 1"
        let "RTPS_RELAY_PORT_ANDROID_DATA = RTPS_RELAY_PORT_ANDROID + 2"
        sed -e "s/#SPDP_RTPS_RELAY_ADDRESS_LINE/SpdpRtpsRelayAddress=${RTPS_RELAY_IP_ANDROID}:${RTPS_RELAY_PORT_ANDROID}/g" -e "s/#SEDP_RTPS_RELAY_ADDRESS_LINE/SedpRtpsRelayAddress=${RTPS_RELAY_IP_ANDROID}:${RTPS_RELAY_PORT_ANDROID_SEDP}/g" -e "s/#DATA_RTPS_RELAY_ADDRESS_LINE/DataRtpsRelayAddress=${RTPS_RELAY_IP_ANDROID}:${RTPS_RELAY_PORT_ANDROID_DATA}/g" -i'' "${_SMART_LOCK_DIR}/android/SmartLock/app/src/main/assets/opendds_config.ini"
    fi
    #if [ -n "${RTPS_RELAY_IP:-}" ]; then
    #    sed -e "s/#SPDP_RTPS_RELAY_ADDRESS_LINE/SpdpRtpsRelayAddress=${RTPS_RELAY_IP}:4444/g" -e "s/#SEDP_RTPS_RELAY_ADDRESS_LINE/SedpRtpsRelayAddress=${RTPS_RELAY_IP}:4445/g" -e "s/#DATA_RTPS_RELAY_ADDRESS_LINE/DataRtpsRelayAddress=${RTPS_RELAY_IP}:4446/g" -i'' "${_SMART_LOCK_DIR}/android/SmartLock/app/src/main/assets/opendds_config.ini"
    #fi

    docker run --rm -ti -v "${_SMART_LOCK_DIR}:/home/droid/smartlock" -w '/home/droid' android-opendds-cross bash -c '
APP_MPC_NAME=SmartLock_Idl_Java;
APP_NAME=SmartLock;
DDS_ROOT=/home/droid/droid-opendds;
source $DDS_ROOT/build/target/setenv.sh;
echo $HOME
cd $HOME/smartlock/android/Idl;
mwc.pl -type gnuace;
make -f GNUmakefile.${APP_MPC_NAME} ${APP_NAME}TypeSupportJC.h && \
        make && \
        $DDS_ROOT/java/build_scripts/javac_wrapper.pl \
          -sourcepath . \
          -d classes \
          -classpath . \
          -implicit:none \
          -classpath $DDS_ROOT/lib/i2jrt_compact.jar \
          -classpath $DDS_ROOT/lib/i2jrt.jar \
          -classpath $DDS_ROOT/lib/OpenDDS_DCPS.jar \
          ${APP_NAME}/*;
cp $HOME/libs/*.jar $HOME/smartlock/android/Idl/*.jar $HOME/smartlock/android/SmartLock/app/libs;
mkdir -p $HOME/smartlock/android/SmartLock/app/native_libs/arm64-v8a;
cp $HOME/libs/*.so $HOME/smartlock/android/Idl/*.so $HOME/smartlock/android/SmartLock/app/native_libs/arm64-v8a;'

    (
        cd "${_SMART_LOCK_DIR}/android/SmartLock"
        ./gradlew assemble
    )
}

function android-clean {
    #Remove the compiled application
    #ex: ./smart-lock android clean 
    match-keyword 'clean'
    expected-end-of-input

    load-config
    docker run --rm -ti -v "${_SMART_LOCK_DIR}:/home/droid/smartlock" -w '/home/droid' android-opendds-cross bash -c '
APP_MPC_NAME=SmartLock_Idl_Java;
APP_NAME=SmartLock;
DDS_ROOT=/home/droid/droid-opendds;
source $DDS_ROOT/build/target/setenv.sh;
echo $HOME
cd $HOME/smartlock/android/Idl;
make clean
rm $HOME/smartlock/android/SmartLock/app/native_libs/arm64-v8a/*.so;'

    (
        cd "${_SMART_LOCK_DIR}/android/SmartLock"
        ./gradlew clean
    )
}

function android-install {
    #Install the SmartLock Demo application
    #ex: ./smart-lock android install
    match-keyword 'install'
    expected-end-of-input

    (
        load-config
        cd "${_SMART_LOCK_DIR}/android/SmartLock"
        "${ANDROID_HOME}/platform-tools/adb" -d install ./app/build/outputs/apk/debug/app-debug.apk
    )
}

function android-ssh {
    #SSH into the Android
    #ex: ./smart-lock android ssh
    match-keyword 'ssh'
    expected-end-of-input

    load-config
    "${ANDROID_HOME}/platform-tools/adb" shell
}

function android-start {
    #Start the SmartLock Demo application
    #ex: ./smart-lock android start
    match-keyword 'start'
    expected-end-of-input

    load-config
    "${ANDROID_HOME}/platform-tools/adb" shell am start -n org.opendds.smartlock/org.opendds.smartlock.MainActivity
}

function android-stop {
    #Stop the SmartLock  Demo application
    #ex: //smart-lock android stop
    match-keyword 'stop'
    expected-end-of-input

    load-config
    "${ANDROID_HOME}/platform-tools/adb" shell am force-stop org.opendds.smartlock
}

function android-logs {
    # Show logs from the SmartLock Demo 
    #ex: //smart-lock android logs
    local dump_flags='-d'

    match-keyword 'logs'
    local -r token="$(peek)"
    case "${token}" in
        follow)
            match-keyword 'follow'
            dump_flags=''
            ;;
        '#COMPLETION#')
            expected-keywords 'follow'
            ;;
        '#END#')
            # Okay.
            ;;
    esac
    expected-end-of-input

    load-config
    local -r pid=$("${ANDROID_HOME}/platform-tools/adb" shell 'ps -A -o PID,ARGS | grep smartlock | grep -v grep' | awk '{print $1}')
    if [[ -z ${pid} ]]; then
        echo "Smartlock Demo application is not running" >&2
        return 1
    fi
    "${ANDROID_HOME}/platform-tools/adb" logcat --pid="${pid}" "${dump_flags}"
}


function android {
    #Maps commands to a android version
    #ex: ./smart-lock android help
    match-keyword 'android'
    local -r h=$(cat <<EOF
$(command-prefix) - Development tool for Android in the SmartLock Demo

Usage: $(command-prefix) COMMAND [OPTION ...]

Commands:
        build-toolchain [commit]  Build a Docker image containing a cross-compiler and cross-compiled dependencies
        clean-toolchain           Remove the Docker image containing a cross-compiler and cross-compiled dependencies
        compile                   Cross-compile the SmartLock Demo application
        clean                     Remove the compiled application
        install                   Install the SmartLock Demo application
        ssh                       SSH into the Android
        start                     Start the SmartLock Demo application
        stop                      Stop the SmartLock  Demo application
        logs [follow]             Show logs from the SmartLock Demo application
        help                      Print this help
EOF
                 )
    set-help "${h}"

    local -r token="$(peek)"
    case "${token}" in
        build-toolchain)
            android-build-toolchain
            ;;
        clean-toolchain)
            android-clean-toolchain
            ;;
        compile)
            android-compile
            ;;
        clean)
            android-clean
	    ;;
        install)
            android-install
            ;;
        start)
            android-start
            ;;
        stop)
            android-stop
            ;;
        ssh)
            android-ssh
            ;;
        logs)
            android-logs
            ;;
        *)
            expected-keywords build-toolchain clean-toolchain compile clean install start stop ssh logs
            ;;
    esac
}

function top-level-command {
    #sets up the command tree 
    # first branches are pi / android / help / config
    local -r h=$(cat <<EOF
$(command-prefix) - Development tool for the SmartLock Demo

Usage: $(command-prefix) [OPTION...] COMMAND ...

Options:
        config PATH     Set the configuration file

Commands:
        pi              Work with the Raspberry Pi
        android         Work with the Android
        help            Print this help
EOF
                   )
    set-help "${h}"
    local -r token="$(peek)"
    case "${token}" in
        config)
            config
            ;;
        pi)
            pi
            return
            ;;
        android)
            android
            return
            ;;
        *)
            expected-keywords ${_no_config+config} pi android
            ;;
    esac

    top-level-command
}


function top {
    top-level-command
    expected-end-of-input
}

top


# 1. Tab completion should work.
#    a) should offer 'help' after every keyword
#    b) should offer 'help' at the end
# 2. Command line errors should be reported showing where the error is and what was expected.
# 3. A longer help blurb should be allowed
#    a) anywhere a keyword is allowed
#    b) at the end of the line

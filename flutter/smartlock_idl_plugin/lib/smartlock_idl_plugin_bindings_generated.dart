// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/smartlock_idl_plugin.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class SmartlockIdlPluginBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SmartlockIdlPluginBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SmartlockIdlPluginBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<OpenDdsBridge> createOpenDdsBridge() {
    return _createOpenDdsBridge();
  }

  late final _createOpenDdsBridgePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<OpenDdsBridge> Function()>>(
          'createOpenDdsBridge');
  late final _createOpenDdsBridge = _createOpenDdsBridgePtr
      .asFunction<ffi.Pointer<OpenDdsBridge> Function()>();

  void destroyOpenDdsBridge(
    ffi.Pointer<OpenDdsBridge> bridge,
  ) {
    return _destroyOpenDdsBridge(
      bridge,
    );
  }

  late final _destroyOpenDdsBridgePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OpenDdsBridge>)>>(
      'destroyOpenDdsBridge');
  late final _destroyOpenDdsBridge = _destroyOpenDdsBridgePtr
      .asFunction<void Function(ffi.Pointer<OpenDdsBridge>)>();

  void startOpenDdsBridge(
    ffi.Pointer<OpenDdsBridge> bridge,
  ) {
    return _startOpenDdsBridge(
      bridge,
    );
  }

  late final _startOpenDdsBridgePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<OpenDdsBridge>)>>(
      'startOpenDdsBridge');
  late final _startOpenDdsBridge = _startOpenDdsBridgePtr
      .asFunction<void Function(ffi.Pointer<OpenDdsBridge>)>();

  void shutdownOpenDdsBridge() {
    return _shutdownOpenDdsBridge();
  }

  late final _shutdownOpenDdsBridgePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('shutdownOpenDdsBridge');
  late final _shutdownOpenDdsBridge =
      _shutdownOpenDdsBridgePtr.asFunction<void Function()>();
}

class OpenDdsBridge extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}
